import h5py
import open3d as o3d
import numpy as np
import colorsys
import matplotlib.pyplot as plt
import queue
import os
from sklearn import metrics

def get_colors(n):
    cmap = []
    for i in np.arange(0.,360.,360./n):
        hue = i/360
        lightness = (50+np.random.rand()*10)/100
        saturation = (90+np.random.rand()*10)/100
        cmap.append(colorsys.hls_to_rgb(hue,lightness,saturation))
    return np.array(cmap)


def save_mesh(fn, xyz, faces):
    with open(fn, 'w') as f:
        point_num = xyz.shape[0]
        face_num = faces.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('element vertex %d\n' % (point_num))
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('element face %d\n' % (face_num))
        f.write('property list uchar int vertex_index\n')
        f.write('end_header\n')
        for i in range(point_num):
            f.write('%.6f %.6f %.6f\n' % (xyz[i][0], xyz[i][1], xyz[i][2]))
        for i in range(face_num):
            f.write('%d %d %d %d\n' % (faces[i][0], faces[i][1], faces[i][2] ,faces[i][3]))


def save_Yshape_ply(fn, xyz):

    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('element vertex %d\n' % (pn))
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('end_header\n')
        for i in range(pn):
            f.write('%.6f %.6f %.6f\n' % (xyz[i][0], xyz[i][1], xyz[i][2]))


def save_xyz(xyz, fn):
    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        for i in range(pn):
            f.write('%f %f %f\n' % (xyz[i][0], xyz[i][1], xyz[i][2]))


def save_branches_xyz(xyz, cls, fn):
    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        for i in range(pn):
            if cls[i] == 0:
                f.write('%f %f %f\n' % (xyz[i][0], xyz[i][1], xyz[i][2]))


def save_ply_with_color(xyz, cls, fn, threshold):

    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('element vertex %d\n' % (pn))
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            if_leaf = cls[i] > threshold
            f.write('%.6f %.6f %.6f %d %d %d\n' % (xyz[i][0], xyz[i][1], xyz[i][2], int(if_leaf)*255, 0, (1-int(if_leaf))*255))


def save_branchy_ply(xyz, cls, fn):

    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('element vertex %d\n' % (pn - np.sum(cls)))
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            if_leaf = cls[i] > 0
            if not if_leaf:
                f.write('%.6f %.6f %.6f %d %d %d\n' % (xyz[i][0], xyz[i][1], xyz[i][2], int(if_leaf)*255, 0, int(1-if_leaf)*255))



def save_semantic_seg(xyz, isfork, fn):
    with open(fn,'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('comment generated by chao\n')
        f.write('element vertex %d\n'%pn)
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            if isfork[i]:
                f.write('%f %f %f 204 100 114\n'%(xyz[i][0],xyz[i][1],xyz[i][2]))
            else:
                f.write('%f %f %f 217 217 217\n' % (xyz[i][0], xyz[i][1], xyz[i][2]))

def save_initial_cluster(xyz, primitive, fn):
    color_map = get_colors(256) * 256
    with open(fn,'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('comment generated by chao\n')
        f.write('element vertex %d\n'%pn)
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            f.write('%f %f %f %d %d %d\n' % (xyz[i][0], xyz[i][1], xyz[i][2],
                                             color_map[primitive[i]][0],color_map[primitive[i]][1],color_map[primitive[i]][2]))

def save_final_cluster(xyz, primitive, fn):
    count = np.max(primitive) + 1
    color_map = get_colors(count) * 256
    with open(fn, 'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('comment generated by chao\n')
        f.write('element vertex %d\n' % pn)
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            f.write('%f %f %f %d %d %d\n' % (xyz[i][0], xyz[i][1], xyz[i][2],
                                             color_map[primitive[i]][0], color_map[primitive[i]][1],
                                             color_map[primitive[i]][2]))

def save_ply(xyz, isfork, fn):
    with open(fn,'w') as f:
        pn = xyz.shape[0]
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('comment generated by chao\n')
        f.write('element vertex %d\n'%pn)
        f.write('property float x\n')
        f.write('property float y\n')
        f.write('property float z\n')
        f.write('property uchar red\n')
        f.write('property uchar green\n')
        f.write('property uchar blue\n')
        f.write('end_header\n')
        for i in range(pn):
            if isfork[i]:
                f.write('%f %f %f 255 0 0\n'%(xyz[i][0],xyz[i][1],xyz[i][2]))
            else:
                f.write('%f %f %f 0 255 0\n' % (xyz[i][0], xyz[i][1], xyz[i][2]))

def save_cluster_index(gt_num, pred_num, ri, nmi, i):
    fn = 'Tree' + str(i) + '_cluster_index.txt'
    with open(fn, 'w') as f:
        f.write('Ground Truth Number: %d\n' % gt_num)
        f.write('Prediction Number: %d\n' % pred_num)
        f.write('Rand Index: %f\n' % ri)
        f.write('Normalized Mutual Index: %f\n' % nmi)

def clusterPoints(codebook, isfork):
    joint_set_label = np.zeros(len(isfork),dtype=int)
    #bfs search
    visited = np.zeros(len(isfork),dtype=bool)
    for i in range(len(visited)):
        if not visited[i]:
            q = queue.Queue()
            q.put(i)
            while not q.empty():
                u = q.get()
                visited[u] = True
                joint_set_label[u]=i
                #get adjacent neighbors
                idx = np.nonzero(codebook[u])
                if len(idx) > 0 and idx[0].size > 0:
                    idx = idx[0]
                    for j in range(len(idx)):
                        cur = idx[j]
                        if not visited[cur]:
                            visited[cur] = True
                            q.put(cur)
    '''
    combine the same label
    '''
    unique_label = np.unique(joint_set_label)
    reverse_dict = {}
    for i in range(len(unique_label)):
        reverse_dict[unique_label[i]]=i

    for i in range(len(joint_set_label)):
        joint_set_label[i]=reverse_dict[joint_set_label[i]]

    #print(joint_set_label)
    return joint_set_label

def getGTLabel(codebook, primitive):
    joint_set_label = np.zeros(codebook.shape[0], dtype=int)
    # bfs search
    visited = np.zeros(codebook.shape[0], dtype=bool)
    for i in range(len(visited)):
        if not visited[i]:
            q = queue.Queue()
            q.put(i)
            while not q.empty():
                u = q.get()
                visited[u] = True
                joint_set_label[u]=i
                #get adjacent neighbors
                idx = np.nonzero(codebook[u])
                if len(idx) > 0 and idx[0].size > 0:
                    idx = idx[0]
                    for j in range(len(idx)):
                        cur = idx[j]
                        if not visited[cur]:
                            q.put(cur)
    '''
    combine the same label
    '''
    unique_label = np.unique(joint_set_label)
    reverse_dict = {}
    for i in range(len(unique_label)):
        reverse_dict[unique_label[i]] = i

    for i in range(len(joint_set_label)):
        joint_set_label[i] = reverse_dict[joint_set_label[i]]

    gt_num = np.max(joint_set_label) + 1
    return joint_set_label[primitive], gt_num

def drawTree(xyz, label):
    count = np.max(label) + 1
    color_map = get_colors(count)
    colors = color_map[label]
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(xyz)
    pcd.colors = o3d.utility.Vector3dVector(colors)
    o3d.visualization.draw_geometries([pcd])

def drawSemanticRes(xyz, label):
    cmap = np.array([[0,0.7,0], [0,0,0]])
    colors = cmap[label]
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(xyz)
    pcd.colors = o3d.utility.Vector3dVector(colors)
    o3d.visualization.draw_geometries([pcd])

def drawTreeSeg(xyz, isfork, label):
    count = np.max(label) + 1
    color_map = get_colors(count)
    colors = color_map[label]
    isfork = 1 - isfork
    isfork = isfork.repeat(3)
    isfork = isfork.reshape(colors.shape)
    colors = colors*isfork
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(xyz)
    pcd.colors = o3d.utility.Vector3dVector(colors)
    o3d.visualization.draw_geometries([pcd])

def output_xyz(xyz, label, i):
    unique_label = np.unique(label)
    for j in unique_label:
        idx = np.where(label==j)
        cluster = xyz[idx[0]]
        save_xyz(cluster,'output/'+str(i)+'_'+str(j)+'.xyz')

def output_ply(xyz, label, isfork, i):
    unique_label = np.unique(label)
    prefix_path = os.path.join('feedL1', 'Tree'+str(i))
    os.makedirs(os.path.join(prefix_path,'output'))
    prefix_path = os.path.join(prefix_path, 'data')
    os.makedirs(prefix_path)
    for j in unique_label:
        idx = np.where(label == j)
        cluster = xyz[idx[0]]
        fork = isfork[idx[0]]
        save_ply(cluster,fork,os.path.join(prefix_path,str(i)+'_'+str(j)+'.ply'))

def post_process(filepath):
    with h5py.File(filepath, 'r') as f:
        sz = f['pred_isfork'].shape[0]
        for i in range(sz):
            #if i in [7,12,15]: continue
            print(i)
            xyz = f['points'][i]
            codebook = f['pred_fnode'][i]
            isfork = f['pred_isfork'][i]
            fsamples = f['samples'][i]
            primitive = f['pred_lc'][i]
            node_isfork = isfork[fsamples]
            #node_xyz = xyz[fsamples]
            save_initial_cluster(xyz,primitive,'output/Tree' + str(i) + '_initial_cluster.ply')
            joint_label = clusterPoints(codebook,node_isfork)
            primitive = joint_label[primitive]
            #drawSemanticRes(xyz,isfork)
            #drawTree(xyz, primitive)
            #drawTreeSeg(xyz,isfork,primitive)
            #output_xyz(xyz, primitive, i)
            output_ply(xyz, primitive, isfork, i)
            save_xyz(xyz, 'output/Tree' + str(i) + '_input.xyz')
            save_semantic_seg(xyz, isfork, 'output/Tree' + str(i) + '_semantic.ply')
            save_final_cluster(xyz,primitive,'output/Tree' + str(i) + '_final_cluster.ply')
            #if i==0:
                #break

def output_fns(filepath_r, filepath_w):
    with h5py.File(filepath_r, 'r') as f:
        sz = f['pred_isfork'].shape[0]
        with open(filepath_w, 'w') as fw:
            for i in range(sz):
                fw.write(str(f['names'][i])+'\n')

def getClusterRes(filepath):
    with h5py.File(filepath, 'r') as f:
        for i in [63, 314, 226]:
            print(i)
            xyz = f['points'][i]
            isfork = f['pred_isfork'][i]
            codebook = f['pred_fnode'][i]
            primitive = f['pred_lc'][i]
            fsamples = f['samples'][i]
            node_isfork = isfork[fsamples]
            joint_label = clusterPoints(codebook, node_isfork)
            pred_labels = joint_label[primitive]
            save_final_cluster(xyz, pred_labels, 'output/Tree' + str(i) + '.ply')
            pred_num = np.max(joint_label) + 1
            primitive = f['primitive_id'][i]
            codebook = f['codebook'][i]
            gt_labels, gt_num = getGTLabel(codebook, primitive)
            rand_index = metrics.rand_score(gt_labels, pred_labels)
            nmi = metrics.normalized_mutual_info_score(gt_labels, pred_labels)
            save_cluster_index(gt_num, pred_num, rand_index, nmi, i)
            save_final_cluster(xyz, gt_labels, 'output/Tree' + str(i) + '_gt_cluster.ply')


if __name__ == '__main__':
    #getClusterRes('pred_output/tree_test_pred31.hdf5')
    post_process('pred_output/supp_pred_ours.hdf5')
    #output_fns('pred_output/tree_test_pred31.hdf5', 'test_filenames.txt')